#!/usr/bin/env python3

import contextlib
import datetime
import fnmatch
import hashlib
import json
import os
import pathlib
import re
import shutil
import sys
import tempfile
import textwrap
import zipfile

from difflib import Differ
from pathlib import Path
from urllib.parse import urlparse

## Insert our extra modules.
sys.path.insert(0, str(Path(__file__).parent / 'pylibs.zip'))

import requests
from ports_info import ports_info

################################################################################
## Override this for custom tools/ports directories
TOOLS_DIR=None
PORTS_DIR=None
UPDATE_FREQUENCY=(60 * 60 * 22) # Only check automatically once a day.

SOURCE_DEFAULT_PORTMASTER = """
{
    "prefix": "pm",
    "api": "PortMasterV1",
    "name": "PortMaster",
    "url": "https://api.github.com/repos/PortsMaster/PortMaster-Releases/releases/latest",
    "last_checked": null,
    "version": 1,
    "data": {}
}
""".strip()

################################################################################
## The following code is a simplification of the PortMaster toolsloc and whichsd code.
DEFAULT_PORTS_DIR = Path("/roms/ports")

if Path("/opt/tools/PortMaster/").is_dir():
    DEFAULT_TOOLS_DIR = Path("/opt/tools")
elif Path("/opt/system/Tools/PortMaster/").is_dir():
    DEFAULT_TOOLS_DIR = Path("/opt/system/Tools")
elif Path("/storage/roms/ports").is_dir():
    DEFAULT_TOOLS_DIR = Path("/storage/roms/ports")
    DEFAULT_PORTS_DIR = Path("/storage/roms/ports")
else:
    DEFAULT_TOOLS_DIR = Path("/roms/ports")

if Path("/roms2/ports").is_dir():
    DEFAULT_PORTS_DIR = Path("/roms2/ports")

## Default TOOLS_DIR
if TOOLS_DIR is None:
    if 'TOOLS_DIR' in os.environ:
        TOOLS_DIR = Path(os.environ['TOOLS_DIR'])
    else:
        TOOLS_DIR = DEFAULT_TOOLS_DIR
elif isinstance(TOOLS_DIR, str):
    TOOLS_DIR = Path(TOOLS_DIR).resolve()
elif isinstance(TOOLS_DIR, pathlib.PurePath):
    # This is good.
    pass
else:
    print(f"Error: {TOOLS_DIR!r} is set to something weird.")
    exit(255)

## Default PORTS_DIR
if PORTS_DIR is None:
    if 'PORTS_DIR' in os.environ:
        PORTS_DIR = Path(os.environ['PORTS_DIR']).resolve()
    else:
        PORTS_DIR = DEFAULT_PORTS_DIR
    PORTS_DIR = Path(__file__).parent.resolve().parent
elif isinstance(ports_dir, str):
    PORTS_DIR = Path(PORTS_DIR).resolve()
elif isinstance(PORTS_DIR, pathlib.PurePath):
    # This is good.
    pass
else:
    print(f"Error: {PORTS_DIR!r} is set to something weird.")
    exit(255)

################################################################################
## Utils
def fetch(url):
    r = requests.get(url)
    if r.status_code != 200:
        print(f"Failed to download {url!r}: [{r.status_code}]")
        return None

    return r


def fetch_data(url):
    r = fetch(url)
    if r is None:
        return None

    return r.content


def fetch_json(url):
    r = fetch(url)
    if r is None:
        return None

    return r.json()


def fetch_text(url):
    r = fetch(url)
    if r is None:
        return None

    return r.text


def raw_download(save_path, file_url):
    url_info = urlparse(file_url)

    file_name = url_info.path.rsplit('/', 1)[1]

    if not file_name.endswith('.zip'):
        print(f"Unable to download file: {file_url!r} [doesn't end with '.zip']")
        return None

    file_name = file_name.replace('%20', '.').replace('+', '.').replace('..', '.')

    zip_file = save_path / file_name

    r = requests.get(file_url, stream=True)

    if r.status_code != 200:
        print(f"Unable to download file: {file_url!r} [{r.status_code}]")
        return None

    total_length = r.headers.get('content-length')
    if total_length is None:
        total_length = None
        total_length_mb = "Unknown"
    else:
        total_length = int(total_length)
        total_length_mb = f"{total_length / 1024 / 1024:.02f} MB"

    md5 = hashlib.md5()

    print(f"Downloading {file_url!r} - {total_length_mb}")

    length = 0
    with zip_file.open('wb') as fh:
        for data in r.iter_content(chunk_size=104096, decode_unicode=False):
            md5.update(data)
            fh.write(data)
            length += len(data)

            if total_length is None:
                sys.stdout.write(f"\r[{'?' * 50}] - {length // 1024 // 1024:3d} / {total_length_mb}")
            else:
                amount = int(length / total_length * 50)
                sys.stdout.write(f"\r[{'.' * amount}{' ' * (50 - amount)}] - {length // 1024 // 1024:3d} / {total_length_mb}")
            sys.stdout.flush()

        print("\n")

    md5_file = md5.hexdigest()

    zip_info = PortInfo({})

    zip_info.md5 = md5_file
    zip_info.source = f"url/{zip_file.name}"
    zip_info.zip_file = zip_file
    zip_info.attr['url'] = file_url

    print("Success!")
    return zip_info


def datetime_compare(time_a, time_b=None):
    if isinstance(time_a, str):
        time_a = datetime.datetime.fromisoformat(time_a)

    if time_b is None:
        time_b = datetime.datetime.now()
    elif isinstance(time_b, str):
        time_b = datetime.datetime.fromisoformat(time_b)

    return (time_b - time_a).seconds


def add_unique(base_list, value):
    if value not in base_list:
        base_list.append(value)


def add_unique_list(base_dict, key, value):
    if key not in base_dict:
        base_dict[key] = value
        return

    if isinstance(base_dict[key], str):
        if base_dict[key] == value:
            return

        base_dict[key] = [base_dict[key]]

    if value not in base_dict[key]:
        base_dict[key].append(value)


def get_list(base_dict, key):
    if key not in base_dict:
        return []

    result = base_dict[key]
    if isinstance(result, str):
        return [result]

    return result


@contextlib.contextmanager
def make_temp_directory():
    temp_dir = tempfile.mkdtemp()
    try:
        yield Path(temp_dir)

    finally:
        shutil.rmtree(temp_dir)


################################################################################
## APIS

class BaseSource():
    VERSION = 0

    def __init__(self, hm, file_name, config):
        pass


class PortMasterV1(BaseSource):
    VERSION = 2

    def __init__(self, hm, file_name, config):
        self._hm = hm
        self._file_name = file_name
        self._config = config
        self._prefix = config['prefix']
        self._did_update = False

        if config['version'] != self.VERSION:
            print(f"{self._config['name']}: Cache out of date.")
            self.update()
        elif self._config['last_checked'] is None:
            print(f"{self._config['name']}: First check.")
            self.update()
        elif datetime_compare(self._config['last_checked']) > UPDATE_FREQUENCY:
            print(f"{self._config['name']}: Auto Update.")
            self.update()
        else:
            self._data = self._config['data']['data']
            self._info = self._config['data']['info']
            self.ports = self._config['data']['ports']
            self.utils = self._config['data']['utils']

    def clean_name(self, text):
        return text.lower()

    def update(self):
        if self._did_update:
            print(f"{self._config['name']}: up to date already.")
            return

        print(f"{self._config['name']}: Fetching latest ports")
        data = fetch_json(self._config['url'])

        self._data = {}
        self._info = {}
        self.ports = []
        self.utils = []

        ## Load data from the assets.
        for asset in data['assets']:
            result = {
                'name': asset['name'],
                'size': asset['size'],
                'url': asset['browser_download_url'],
                }

            self._data[self.clean_name(asset['name'])] = result

            if asset['name'].lower().endswith('.squashfs'):
                self.utils.append(self.clean_name(asset['name']))

        print(f"{self._config['name']}: Fetching info")
        for line in fetch_text(self._data['ports.md']['url']).split('\n'):
            line = line.strip()
            if line == '':
                continue

            info = self._parse_port_info(line)
            info_key = self.clean_name(info['file'])

            self._info[info_key] = info

            self.ports.append(info_key)

        self._config['version'] = self.VERSION

        self._config['data']['ports'] = self.ports
        self._config['data']['utils'] = self.utils
        self._config['data']['info']  = self._info
        self._config['data']['data']  = self._data

        self._config['last_checked'] = datetime.datetime.now().isoformat()

        self._save()
        self._did_update = True
        print(f"{self._config['name']}: Done.")

    def _save(self):
        with self._file_name.open('w') as fh:
            json.dump(self._config, fh, indent=4)

    def _parse_port_info(self, text):
        # Super jank
        keys = {
            'title_f': 'title',
            'title_p': 'title',
            'locat': 'file',
            }

        info = {
            'title': '',
            'desc': '',
            'file': '',
            'porter': '',
            'opengl': False,
            'power': False,
            'rtr': False,
            'mono': False,
            'genres': [],
            }

        for key, value in re.findall(r'(?:^|\s)(\w+)=\"(.+?)"(?=\s+\w+=|$)', text.strip()):
            if key.lower() == 'title_f':
                info['opengl'] = True

            if key.lower() == 'title_p':
                info['power'] = True

            key = keys.get(key.lower(), key.lower())
            if key == 'title':
                value = value[:-2].replace('_', ' ')

            # Zips with spaces in their names get replaced with '.'
            if '%20' in value:
                value = value.replace('%20', '.')
                value = value.replace('..', '.')

            # Special keys
            if key == 'runtype':
                key, value = 'rtr', True
            elif key == 'mono':
                key, value = 'mono', True
            elif key == 'genres':
                value = value.split(',')

            info[key] = value

        return info


    def port_info(self, port_name):
        assert port_name in self.ports, f"{port_name} not found."

        return self._info[port_name]


    def download(self, port_name):
        if port_name not in self._data:
            print(f"Unable to find port {port_name}")
            return None

        zip_file = self._hm.temp_dir / port_name

        md5_source = fetch_text(self._data[port_name + '.md5']['url'])
        if md5_source is None:
            print(f"Unable to download md5 file: {self._data[port_name + '.md5']['url']!r}")
            return None

        md5_source = md5_source.strip()

        r = requests.get(self._data[port_name]['url'], stream=True)

        if r.status_code != 200:
            print(f"Unable to download port file: {self._data[port_name]['url']!r} [{r.status_code}]")
            return None

        total_length = r.headers.get('content-length')
        if total_length is None:
            total_length = self._data[port_name]['size']
        else:
            total_length = int(total_length)

        md5 = hashlib.md5()

        print(f"Downloading {self._data[port_name]['url']!r} - {total_length / 1024 / 1024:.02f} MB")

        length = 0
        with zip_file.open('wb') as fh:
            for data in r.iter_content(chunk_size=104096, decode_unicode=False):
                md5.update(data)
                fh.write(data)
                length += len(data)

                amount = int(length / total_length * 50)
                sys.stdout.write(f"\r[{'.' * amount}{' ' * (50 - amount)}] - {length // 1024 // 1024:3d} / {total_length // 1024 // 1024:3d} MB")
                sys.stdout.flush()

            print("\n")

        md5_file = md5.hexdigest()

        if md5_file != md5_source:
            zip_file.unlink()
            print(f"File doesn't match the md5 file: {md5_file} != {md5_source}")
            return None

        if port_name not in self.utils:
            ## Utils
            print("Success!")
            return zip_file

        zip_info = PortInfo({})

        zip_info.md5 = md5_file
        zip_info.source = f"{self._prefix}/{port_name}"
        zip_info.attr['porter'] = self._info[port_name]['porter']
        zip_info.attr['desc']   = self._info[port_name]['desc']
        zip_info.attr['mono']   = self._info[port_name]['mono']
        zip_info.attr['rtr']    = self._info[port_name]['rtr']
        zip_info.zip_file = zip_file

        print("Success!")
        return zip_info


    def portmd(self, port_name):
        info = self.port_info(port_name)
        output = []

        if info['opengl']:
            output.append(f'Title_F="{info["title"].replace(" ", "_")} ."')
        elif info['power']:
            output.append(f'Title_P="{info["title"].replace(" ", "_")} ."')
        else:
            output.append(f'Title="{info["title"].replace(" ", "_")} ."')

        output.append(f'Desc="{info["desc"]}"')
        output.append(f'porter="{info["porter"]}"')
        output.append(f'locat="{self._prefix}/{info["file"]}"')
        if info['rtr']:
            output.append(f'runtype="rtr"')
        if info['mono']:
            output.append(f'mono="y"')

        return ' '.join(output)


SOURCE_APIS = {
    'PortMasterV1': PortMasterV1,
    }

################################################################################
## Port Information
class PortInfo():
    __attrs__ = (
        'source', 'items', 'items', 'items_opt', 'md5', 'attr')

    def __init__(self, info):
        if isinstance(info, pathlib.PurePath):
            with info.open('r') as fh:
                self.from_dict(json.load(fh))

        elif isinstance(info, dict):
            self.from_dict(info)

        else:
            raise ValueError(str(info))

    def from_dict(self, info):
        self.source = info.get('source', None)
        self.items = info.get('items', None)
        self.items_opt = info.get('items_opt', None)
        self.md5 = info.get('md5', None)
        self.attr = info.get('attr', {})
        self.attr.setdefault('porter', None)

    def merge_info(self, other):
        if isinstance(other, (str, dict)):
            info = PortInfo(other)

        elif isinstance(other, PortInfo):
            pass

        else:
            raise ValueError(str(info))

        for attr in self.__attrs__:
            value_a = getattr(self, attr)
            value_b = getattr(other, attr, None)

            if value_a is None and value_b is not None:
                setattr(self, attr, value_b)

            if attr == 'attr':
                for key in value_b.keys():
                    if value_b[key] is None:
                        continue

                    if key not in value_a or value_a[key] is None:
                        value_a[key] = value_b[key]

    @property
    def dirs(self):
        return [
            item[:-1]
            for item in self.items
            if item.endswith('/')]

    @property
    def files(self):
        return [
            item
            for item in self.items
            if not item.endswith('/')]

    def to_dict(self):
        return {
            attr: getattr(self, attr)
            for attr in self.__attrs__
            }

    def __str__(self):
        return str(self.to_dict())

    def __repr__(self):
        return str(self.to_dict())


################################################################################
## Config loading
class HarbourMaster():
    CONFIG_VERSION = 1
    DEFAULT_CONFIG = {
        'version': CONFIG_VERSION,
        'first_run': True,
        }

    def __init__(self, tools_dir=None, ports_dir=None, temp_dir=None):
        """
        config = load_config()
        """

        if tools_dir is None:
            tools_dir = TOOLS_DIR

        if ports_dir is None:
            ports_dir = PORTS_DIR

        if isinstance(tools_dir, str):
            tools_dir = Path(tools_dir)
        elif not isinstance(tools_dir, pathlib.PurePath):
            raise ValueError('tools_dir')

        if isinstance(ports_dir, str):
            ports_dir = Path(ports_dir)
        elif not isinstance(ports_dir, pathlib.PurePath):
            raise ValueError('ports_dir')


        self.temp_dir  = temp_dir
        self.tools_dir = tools_dir
        self.cfg_dir   = tools_dir / "PortMaster" / "config"
        self.libs_dir  = tools_dir / "PortMaster" / "libs"
        self.ports_dir = ports_dir
        self.sources = {}
        self.config = {}
        self.ports = []
        self.utils = []

        if not self.cfg_dir.is_dir():
            self.cfg_dir.mkdir(0o755, parents=True)

            with (self.cfg_dir / '000_portmaster.source.json').open('w') as fh:
                fh.write(SOURCE_DEFAULT_PORTMASTER)

            with (self.cfg_dir / 'config.json').open('w') as fh:
                json.dump(self.DEFAULT_CONFIG, fh, indent=4)

        with (self.cfg_dir / 'config.json').open('r') as fh:
            self.config = json.load(fh)

        self.load_sources()

        self.load_ports()


    def load_sources(self):
        source_files = list(self.cfg_dir.glob('*.source.json'))
        source_files.sort()

        check_keys = {'version': None, 'prefix': None, 'api': SOURCE_APIS, 'name': None, 'last_checked': None, 'data': None}
        for source_file in source_files:
            with source_file.open() as fh:
                source_data = json.load(fh)

                fail = False
                for check_key, check_value in check_keys.items():
                    if check_key not in source_data:
                        print(f'Missing key "{check_key}" in {source_file}.')
                        fail = True
                        break

                    if check_value is not None and source_data[check_key] not in check_value:
                        print(f"Unknown {check_key} {source_file}: {source_data[check_key]}.")
                        fail = True
                        break

                if fail:
                    continue

            source = SOURCE_APIS[source_data['api']](self, source_file, source_data)

            self.sources[source_data['prefix']] = source


    def load_ports(self):
        """
        Find all installed ports, because ports can be installed by zips we need to recheck every time.
        """
        port_files = list(self.ports_dir.glob('*/*.port.json'))
        port_files.sort()

        self.installed_ports = []
        self.unknown_ports = []
        all_items = {}
        unknown_files = []

        ## Load all the known ports with port.json files
        for port_file in port_files:
            port_info = PortInfo(port_file)

            for item in port_info.items:
                add_unique_list(all_items, item, port_info.source)

                ## TODO: check these files exist, possibly mark the port for deletion if the scripts for it are missing.

            if port_info.items_opt is not None:
                for item in port_info.items_opt:
                    add_unique_list(all_items, item, port_info.source)

            self.installed_ports.append(port_info)

        ## Check all files
        for file_item in self.ports_dir.iterdir():
            ## Skip these
            if file_item.name.lower() in (
                'portmaster', 'portmaster.sh',
                'thememaster', 'thememaster.sh',
                'harbourmaster',
                'images', 'videos', 'manuals',
                'gamelist.xml', 'gamelist.xml.old'):
                continue

            file_name = file_item.name
            if file_item.is_dir():
                file_name += '/'

            port_owners = get_list(all_items, file_name)

            if len(port_owners) == 0:
                if file_name.lower().endswith('.sh'):
                    unknown_files.append(file_name)

        ## Find any ports that match the files we couldnt find matchting a port.json file
        new_ports = []
        for unknown_file in unknown_files:
            port_owners = get_list(ports_info['items'], unknown_file)
            if len(port_owners) == 1:
                add_unique(new_ports, port_owners[0])
            elif len(port_owners) == 0:
                if unknown_file.endswith('.sh'):
                    ## Keep track of unknown bash scripts.
                    self.unknown_ports.append(unknown_file)

        ## Create new port.json files for any new ports, these only contain the most basic of information.
        for new_port in new_ports:
            port_info_raw = ports_info['ports'][new_port]

            port_info = PortInfo(port_info_raw)

            with open(self.ports_dir / port_info_raw['file'], 'w') as fh:
                json.dump(port_info.to_dict(), fh, indent=4)

            self.installed_ports.append(port_info)

    def install_port(self, download_info):
        """
        Installs a port.

        We collect a list of top level scripts/directories, this is added to the port.json file.
        """

        port_info_file = None
        items = []
        dirs = []
        scripts = []

        with zipfile.ZipFile(download_info.zip_file, 'r') as zf:
            for file_info in zf.infolist():
                if file_info.filename.startswith('/'):
                    ## Sneaky
                    print(f"Port {download_info.source} has an illegal file {file_info.filename!r}, aborting.")
                    return 255

                if file_info.filename.startswith('../'):
                    ## Little
                    print(f"Port {download_info.source} has an illegal file {file_info.filename!r}, aborting.")
                    return 255

                if '/../' in file_info.filename:
                    ## Shits
                    print(f"Port {download_info.source} has an illegal file {file_info.filename!r}, aborting.")
                    return 255

                if '/' in file_info.filename:
                    parts = file_info.filename.split('/')

                    if parts[0] not in dirs:
                        items.append(parts[0] + '/')
                        dirs.append(parts[0])

                    if len(parts) == 2:
                        if parts[1].lower().endswith('.port.json'):
                            ## TODO: add the ability for multiple port folders to have multiple port.json files. ?
                            if port_info_file is not None:
                                print(f"Port {download_info.source} has multiple port.json files.")
                                print(f"- Before: {port_info_file.relative_to(self.ports_dir)!r}")
                                print(f"- Now:    {file_info.filename!r}")

                            port_info_file = self.ports_dir / file_info.filename

                    if file_info.filename.lower().endswith('.sh'):
                        print(f"Port {download_info.source} has a shell script inside, this can cause issues.")

                else:
                    if file_info.filename.lower().endswith('.sh'):
                        scripts.append(file_info.filename)
                        items.append(file_info.filename)
                    else:
                        print(f"Port {download_info.source} contains {file_info.filename} at the top level, but it is not a shell script.")

            if len(dirs) == 0:
                print(f"Port {download_info.source} has no directories, aborting.")
                return 255

            if len(scripts) == 0:
                print(f"Port {download_info.source} has no scripts, aborting.")
                return 255

            ## TODO: keep a list of installed files for uninstalling?
            # At this point the port will be installed
            # Extract all the files to the specified directory
            zf.extractall(self.ports_dir)

        if port_info_file is not None:
            port_info = PortInfo(port_info_file)
        else:
            port_info = PortInfo({})

        # print(f"Port Info: {port_info}")
        # print(f"Download Info: {download_info}")

        port_info.merge_info(download_info)

        ## These two are always overriden.
        port_info.items = items
        port_info.md5 = download_info.md5

        if port_info_file is None:
            port_info_file = self.ports_dir / dirs[0] / (download_info.zip_file.stem + '.port.json')

        # print(f"Merged Info: {port_info}")
 
        with open(port_info_file, 'w') as fh:
            json.dump(port_info.to_dict(), fh, indent=4)

        return 0

################################################################################
## Self updater url
HM_UPDATE_URLS = {
    "harbourmaster": "https://github.com/kloptops/harbourmaster/raw/main/harbourmaster.md5",
    "pylibs.zip": "https://github.com/kloptops/harbourmaster/raw/main/pylibs.zip.md5",
    }

def self_upgrade():
    """
    Self-upgrading code.
    """
    self_path = Path(__file__).parent

    if not self_path.is_absolute():
        self_path = self_path.absolute()

    results = []

    print("Performing Self Upgrade.")
    for file_name, file_url_md5 in HM_UPDATE_URLS.items():
        if not file_url_md5.endswith('.md5'):
            print("Self Upgrade: Something is funky, quitting.")
            return 255

        file_url = file_url_md5.rsplit('.', 1)[0]

        file_md5_result = fetch_text(file_url_md5)
        if file_md5_result is None:
            print(f"Self Upgrade: File download failed. [{file_url_md5}]")
            return 255

        file_md5_result = file_md5_result.strip()

        file_data = fetch_data(file_url)
        if file_data is None:
            print(f"Self Upgrade: File download failed. [{file_url}]")
            return 255

        md5 = hashlib.md5()
        md5.update(file_data)
        file_md5_check = md5.hexdigest()

        if file_md5_check != file_md5_result:
            print(f"Self Upgrade: MD5 sum doesn't match. [{file_md5_check} vs {file_md5_result}]")
            return 255

        results.append((file_name, file_data))

    print("Succesfully fetched files, updating.")
    for file_name, file_data in results:
        print(f"- updating {file_name!r}")
        with open(self_path / file_name, 'wb') as fh:
            fh.write(file_data)
        print( "  done.")

    print("All Done!")


################################################################################
## Commands

def do_update(hm, argv):
    """
    Update available ports, checks for new releases.
    """
    if len(argv) == 0:
        argv = ('all', )

    if argv[0].lower() == 'all':
        print('Updating all port sources:')
        for source in hm.sources:
            hm.sources[source].update()
    else:
        for arg in argv:
            if arg not in hm.sources:
                print(f'Unknown source {arg}')
                continue

            print(f'Updating {arg}:')
            hm.sources[arg].update()

    return 0


def do_list(hm, argv):
    """
    List available ports

    {command} list [filters]
    """
    print("Available ports:")
    for source_prefix, source in hm.sources.items():
        for port in source.ports:
            port_info = source.port_info(port)
            print(f"- {source_prefix}/{port}: {port_info['title']}")
            print(f"      {port_info['desc']}")
            print()

    return 0


def do_ports(hm, argv):
    """
    List installed ports

    {command} ports [filters]
    """
    if len(hm.installed_ports) > 0:
        print("Installed Ports:")
        for port_info in hm.installed_ports:
            print(f"- {port_info.source}")

        print()

    if len(hm.unknown_ports) > 0:
        print("Unknown Ports:")
        for file_name in hm.unknown_ports:
            print(f"- {file_name}")

        print()

    if len(hm.installed_ports) == 0 and len(hm.unknown_ports) == 0:
        print("No ports found.")

        print()

    return 0


def do_portsmd(hm, argv):
    """
    List available ports in a format portmaster can use.

    {command} portsmd
    """
    for source_prefix, source in hm.sources.items():
        for port in source.ports:
            print(source.portmd(port))
            print()

    return 0


def do_install(hm, argv):
    """
    Install a port

    {command} install Half-Life.zip               # Install from highest priority repo
    {command} install */Half-Life.zip             # Same as above.
    {command} install pm/Half-Life.zip            # Install specifically from portmaster repo
    {command} install kloptops/Half-Life.zip      # Install specifically from kloptops repo
    {command} install https://example.com/example_port.zip # Download a port from a url
    """
    if len(argv) == 0:
        print("Missing arguments.")
        return do_help(hm, ['install'])

    for arg in argv:
        if arg.startswith('http'):
            download_info = raw_download(hm.temp_dir, arg)

            if download_info is None:
                return 255

            result = hm.install_port(download_info)
            if result != 0:
                return result

            continue

        if '/' in arg:
            repo, port_name = arg.split('/', 1)
        else:
            repo = '*'
            port_name = arg

        for source_prefix, source in hm.sources.items():
            if not fnmatch.fnmatch(source_prefix, repo):
                continue

            if source.clean_name(port_name) not in source.ports:
                continue

            download_info = source.download(source.clean_name(port_name))

            if download_info is None:
                return 255

            result = hm.install_port(download_info)
            if result != 0:
                return result

            break
        else:
            print(f"Unable to find a source for {port_name!r}")

    return 0


def do_upgrade(hm, argv):
    """
    Upgrade a port

    {command} upgrade Half-Life.zip               # Update from highest priority repo
    {command} upgrade */Half-Life.zip             # Same as above.
    {command} upgrade pm/Half-Life.zip            # Update specifically from portmaster repo
    """

    if len(argv) == 0:
        print("Missing arguments.")
        return do_help(hm, ['upgrade'])

    if len(argv) == 1 and argv[0] == 'harbourmaster':
        ## SPECIAL CASE!

        return self_upgrade()

    print("Error: Not yet implemented.")
    return 255


def do_help(hm, argv):
    """
    Shows general help or help for a particular command.

    {command} help
    {command} help list
    """
    command = sys.argv[0]
    if '/' in command:
        command = command.rsplit('/', 1)[1]

    if len(argv) > 0:
        if argv[0].lower() not in all_commands:
            print(f"Error: unknown help command {argv[0]!r}")
            do_help(hm, build_configs, [])
            return

        print(textwrap.dedent(all_commands[argv[0].lower()].__doc__.format(command=command)).strip())
        return

    print(f"{command} <update> [source or all] ")
    print(f"{command} <install/upgrade> [source/]<port_name> ")
    # print(f"{command} <uninstall> [source/]<port_name> ")
    print(f"{command} <list/portsmd> [source or all] [... filters]")
    print(f"{command} <ports>")
    print(f"{command} <help> <command>")
    print()
    print("All available commands: " + (', '.join(all_commands.keys())))


all_commands = {
    'update': do_update,
    'portsmd': do_portsmd,
    'ports': do_ports,
    'list': do_list,
    'install': do_install,
    'upgrade': do_upgrade,
    'help': do_help,
    }


def main(argv):

    with make_temp_directory() as temp_dir:

        hm = HarbourMaster(temp_dir=temp_dir)

        if len(argv) == 1:
            all_commands['help'](hm, [])
            return 1

        if argv[1].lower() not in all_commands:
            print(f'Command {argv[1]!r} not found.')
            all_commands['help'](hm, [])
            return 2

        return all_commands[argv[1].lower()](hm, argv[2:])


if __name__ == '__main__':
    exit(main(sys.argv))
