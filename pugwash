#!/usr/bin/env python3

PORTMASTER_VERSION = '8.1.0a'

import contextlib
import datetime
import hashlib
import os
import re
import shutil
import sys
import textwrap
import zipfile

from pathlib import Path

################################################################################
## This speeds up harbourmaster from 4-5 seconds to 1-2 seconds.
##
## Insert our extra modules.
PYLIB_ZIP     = Path(__file__).parent / 'pylibs.zip'
PYLIB_ZIP_MD5 = Path(__file__).parent / 'pylibs.zip.md5'
PYLIB_PATH    = Path(__file__).parent / 'pylibs'

if (Path(__file__).parent / 'exlibs').is_dir():
    EXLIB_PATH = Path(__file__).parent / 'exlibs'
    sys.path.insert(0, str(EXLIB_PATH))
    sys.path.insert(0, str(PYLIB_PATH))

else:
    if PYLIB_ZIP.is_file():
        if PYLIB_PATH.is_dir():
            print("- removing old pylibs.")
            shutil.rmtree(PYLIB_PATH)

        PYLIB_PATH.mkdir(0o755)
        print("- extracting new pylibs.")
        with zipfile.ZipFile(PYLIB_ZIP, 'r') as zf:
            zf.extractall(PYLIB_PATH)

        md5_check = hashlib.md5()
        with PYLIB_ZIP.open('rb') as fh:
            while True:
                data = fh.read(1024 * 1024)
                if len(data) == 0:
                    break

                md5_check.update(data)

        with PYLIB_ZIP_MD5.open('wt') as fh:
            fh.write(md5_check.hexdigest())

        print("- recorded pylibs.zip.md5")

        del md5_check

        print("- removing pylibs.zip")
        PYLIB_ZIP.unlink()

    sys.path.insert(0, str(PYLIB_PATH))

################################################################################
## Now load the stuff we include
import utility
import harbourmaster
import requests

import sdl2
import sdl2.ext

import pySDL2gui

from utility import cprint, do_cprint_output
from loguru import logger

from harbourmaster import (
    HarbourMaster,
    make_temp_directory,
    )


LOG_FILE = harbourmaster.HM_TOOLS_DIR / "PortMaster" / "pugwash.txt"
if LOG_FILE.parent.is_dir():
    LOG_FILE_HANDLE = logger.add(LOG_FILE, level="DEBUG", backtrace=True, diagnose=True)


"""
-- General State Machine --

Main:
  -> Install Menu
  -> Uninstall Menu -> Port List [Installed filter]
  -> Options
  -> Quit

Install Menu:
  -> All Ports    -> Port List [No filter]
  -> Ready To Run -> Port List [RTR filter]
  -> Genres       -> Port List [Genres filters]
  -> Back

Port List:
  -> List of Ports
    -> Inspect
    -> Back

Options:
  -> TBD.
  -> Back

Inspect:
  -> Install/Re-Install or Uninstall
  -> Back

Install/Uninstall:
  -> Message Screen
  -> Back


Current Template Tags:

    port_info.title
    port_info.description
    port_info.instructions
    port_info.genres
    port_info.porter
    port_info.ready_to_run
    port_info.download_size
    port_info.runtime
    port_info.runtime_status

    system.time_24hr
    system.time_12hr
    system.free_space
    system.used_space
    system.cfw_name
    system.cfw_version
    system.device_name
    system.battery_level

"""

def format_progress(amount, total, fmt=None):
    if fmt == 'data':
        if total is None:
            return f"{harbourmaster.nice_size(amount)}"

        else:
            return f"{harbourmaster.nice_size(amount)} / {harbourmaster.nice_size(total)}"

    elif fmt == '%':
        if total is None:
            return f"{min(amount, 100):.02f} %"

        else:
            return f"{min(amount / total * 100, 100):.02f} %"

    else:
        if total is None:
            return f"{amount}"

        else:
            return f"{amount} / {total}"


def extract_requirements(text, strict=False):
    if strict:
        default = None
    else:
        default = []

    if '[' not in text:
        return text, default

    if text.count('[') > 1 or not text.endswith(']'):
        logger.error(f"Bad requirement {text}")
        return text.split('[')[0] + "_bad", default

    text, requirement = text.split('[', 1)
    requirements = map(str.strip, requirement[:-1].split(','))
    return text, list(requirements)


def theme_update(target, source):
    capabilities = harbourmaster.device_info()['capabilities']

    for key, value in source.items():
        key, requirements = extract_requirements(key)
        if requirements is not None:
            if not harbourmaster.match_requirements(capabilities, requirements):
                continue

        if isinstance(value, dict):
            theme_update(target.setdefault(key, {}), value)
        else:
            target[key] = value

    return target


def theme_merge(target, source):
    temp = theme_update({}, target)
    temp = theme_update(temp, source)
    return temp


def theme_apply(gui, section_data, base_data, elements):
    new_data = {}
    capabilities = harbourmaster.device_info()['capabilities']

    for region_name, region_data in section_data.items():
        if region_name == "#base":
            base_data = theme_merge(base_data, region_data)
            continue

        elif region_name.startswith("#element:"):
            element_name = region_name.split(':', 1)[1]
            if ':' in element_name:
                element_name, region_name = element_name.split(':', 1)
            else:
                region_name = element_name

            region_name, requirements = extract_requirements(region_name)
            if not harbourmaster.match_requirements(capabilities, requirements):
                continue

            if element_name not in elements:
                logger.debug(f"Error: Unknown element {element_name}")
                continue

            new_data[region_name] = theme_merge(base_data, theme_merge(elements[element_name], region_data))
            continue

        region_name, requirements = extract_requirements(region_name, strict=True)
        if requirements is not None:
            if not harbourmaster.match_requirements(capabilities, requirements):
                continue

            new_data[region_name] = theme_merge(new_data.get(region_name, base_data), region_data)

        else:
            new_data[region_name] = theme_merge(base_data, region_data)

    return new_data


def theme_load(gui, theme_file):
    print(f"Loading theme {theme_file}")

    with open(theme_file, 'r') as fh:
        theme_data = harbourmaster.json_safe_load(fh)

    if theme_data is None:
        raise ValueError(f"Unable to load theme {theme_file}")

    capabilities = harbourmaster.device_info()['capabilities']

    base_data = {}
    elements = {}
    sections = {}

    for section_name, section_data in theme_data.items():
        if section_name.startswith('#'):
            if section_name == "#base":
                print("- loading base_data")
                base_data = section_data

            elif section_name == "#resources":
                print("- loading resources:")
                for resource_name, resource_data in section_data.items():
                    if len(resource_data) == 0:
                        print(f"  - loading static {resource_name} - [{gui.images.load_static(resource_name) is None and 'FAIL' or 'OKAY'}]")

                    else:
                        print(f"  - loading atas {resource_name} - [{gui.images.load_atlas(resource_name, resource_data) is None and 'FAIL' or 'OKAY'}]")
                        gui.images.load_atlas(resource_name, resource_data)

            elif section_name == "#elements":
                print("- loading elements:")
                for element_name, element_data in section_data.items():
                    element_name, requirements = extract_requirements(element_name)
                    if not harbourmaster.match_requirements(capabilities, requirements):
                        continue

                    elements[element_name] = element_data

            elif section_name == "#pallet":
                print("- loading pallet:")
                for pallet_name, pallet_value in section_data.items():
                    gui.pallet[pallet_name] = pallet_value

        else:
            section_name, requirements = extract_requirements(section_name, strict=True)
            if requirements is not None:
                if not harbourmaster.match_requirements(capabilities, requirements):
                    logger.debug(f"Not matched: {section_name} -> {capabilities}, {requirements}")
                    continue

                if section_name not in sections:
                    logger.error(f"{section_name} not yet defined, skipping. ({requirement})")
                    continue

                print(f"  - loading section {section_name} ({requirement})")
                sections[section_name] = theme_apply(gui, section_data, sections[section_name], elements)
            else:
                print(f"  - loading section {section_name}")
                sections[section_name] = theme_apply(gui, section_data, base_data, elements)

    return sections


class StringFormatter:
    def __init__(self, data_dict):
        self.data_dict = data_dict

    def _get_value(self, key):
        try:
            return self.data_dict[key]

        except (KeyError, TypeError):
            return None

    def format_string(self, input_string, used_keys=None):
        def replace_key(match):
            key = match.group(1)
            if used_keys is not None and key not in used_keys:
                used_keys.append(key)

            value = self._get_value(key)
            return str(value) if value is not None else f'{{{key}}}'

        pattern = r'\{(.*?)}'
        formatted_string = re.sub(pattern, replace_key, input_string)

        return formatted_string


class BaseScene:
    """
    Scenes handle drawing / logic, different scenes can be transitioned to and or layered.

    Only the top layer receives events.
    """

    def __init__(self, gui):
        self.gui = gui
        self.tags = {}
        self.regions = []
        self.text_regions = {}
        self.update_regions = {}

    def load_regions(self, section, required_tags):
        temp_required_tags = list(required_tags)
        for region_name, region_data in self.gui.theme_data[section].items():
            print(f"Loading region {region_name}: {region_data}")
            region = pySDL2gui.Region(region_data, self.gui)

            if "text" in region_data and "{" in region_data["text"]:
                text_keys = []
                region.text = self.gui.format_data(region_data["text"], text_keys)

                self.text_regions[region_name] = (region, region_data["text"])
                for key in text_keys:
                    self.update_regions.setdefault(key, []).append(region_name)

            region_tag = region_data.get("tag", region_name)
            if region_tag is not None:
                self.tags[region_tag] = region

            if region_tag in temp_required_tags:
                temp_required_tags.remove(region_tag)

            self.regions.append(region)

        if len(temp_required_tags) > 0:
            logger.error(f"Error: missing one or more tags for section {section}: {', '.join(temp_required_tags)}")
            raise RuntimeError("Error missing section tag in theme")

    def update_data(self, keys):
        regions = set()

        for key in keys:
            if key in self.update_regions:
                regions.update(self.update_regions[key])

        for region_name in regions:
            region, text = self.text_regions[region_name]
            region.text = self.gui.format_data(text)

    def do_update(self, events):
        for region in self.regions:
            # print(f"DRAW {region}")
            region.update()

        return False

    def do_draw(self):
        for region in self.regions:
            # print(f"DRAW {region}")
            if not region.visible:
                continue

            region.draw()


class MainMenuScene(BaseScene):
    def __init__(self, gui):
        super().__init__(gui)

        self.load_regions("main_menu", ['option_list', ])

        if len(self.tags['option_list'].list) != len(self.tags['option_list'].option):
            raise RuntimeError("The main_menu -> option_list.list doesnt match the option_list.option")

        self.option = self.tags['option_list'].option

    def do_update(self, events):
        super().do_update(events)

        if events.was_pressed('START') or events.was_pressed('A'):
            selected_option = self.option[self.tags['option_list'].selected]

            if selected_option == 'install':
                self.gui.push_scene('ports', PortsListScene(self.gui, {'mode': 'install', 'filters': []}))
                return True

            elif selected_option == 'install-rtr':
                self.gui.push_scene('ports', PortsListScene(self.gui, {'mode': 'install', 'filters': ['rtr', ]}))
                return True

            elif selected_option == 'uninstall':
                self.gui.push_scene('ports', PortsListScene(self.gui, {'mode': 'uninstall', 'filters': ['installed', ]}))
                return True

            elif selected_option == 'option':
                self.gui.push_scene('option', OptionScene(self.gui))
                return True

            elif selected_option == 'exit':
                self.gui.do_cancel()
                return True

        elif events.was_pressed('B'):
            self.gui.do_cancel()
            return True


class OptionScene(BaseScene):
    def __init__(self, gui):
        super().__init__(gui)

        self.load_regions("option_menu", ['option_list', ])

        if len(self.tags['option_list'].list) != len(self.tags['option_list'].option):
            raise RuntimeError("The main_menu -> option_list.list doesnt match the option_list.option")

        self.option = self.tags['option_list'].option

    def do_update(self, events):
        super().do_update(events)

        if events.was_pressed('START') or events.was_pressed('A'):
            selected_option = self.option[self.tags['option_list'].selected]

            print(f"Selected {selected_option}")

            if selected_option == 'update-ports':
                self.gui.do_update_ports()
                return True

            elif selected_option == 'back':
                self.gui.pop_scene()
                return True

        elif events.was_pressed('B'):
            self.gui.pop_scene()
            return True


class InstallMenuScene(BaseScene):
    def __init__(self, gui):
        super().__init__(gui)


class PortsListScene(BaseScene):
    def __init__(self, gui, options):
        super().__init__(gui)

        self.options = options
        self.options.setdefault('base_filters', [])
        self.options.setdefault('filters', [])

        self.load_regions("ports_list", [
            'ports_list',
            'port_image',
            ])

        self.ready = False
        self.update_ports()

    def update_ports(self):
        if self.gui.hm is None:
            self.all_ports = {}
            self.port_list = []
            self.last_port = 0
            self.tags['ports_list'].selected = 0
            return

        self.all_ports = self.gui.hm.list_ports(filters=(self.options['base_filters'] + self.options['filters']))
        self.port_list = list(self.all_ports.keys())

        if len(self.port_list) == 0:
            self.tags['ports_list'].list = [
                'NO PORTS']

            self.tags['port_image'].image = self.gui.get_port_image("no-image")
            self.gui.set_port_info(None, {})

            self.gui.set_data("port_info.title", "** NO PORTS FOUND **")
            self.gui.set_data("port_info.description", "Download ports first.")

        else:
            self.tags['ports_list'].list = [
                self.all_ports[port_name]['attr']['title']
                for port_name in self.port_list]

        if self.tags['ports_list'].selected >= len(self.port_list):
            if len(self.port_list) == 0:
                self.tags['ports_list'].selected = 0
            else:
                self.tags['ports_list'].selected = len(self.port_list) - 1

        self.last_port = self.tags['ports_list'].selected + 1
        self.ready = True

    def try_to_select(self, port_name, port_title):
        ## Try and select a port
        if port_name in self.port_list:
            # We found it
            self.tags['ports_list'].selected = self.port_list.index(port_name)
            self.last_port = self.tags['ports_list'].selected + 1
            return

        ## Okay find a port with a name greater than ours, and then select the one before it.
        for i in range(len(self.port_list)):
            if self.all_ports[self.port_list[i]]['attr']['title'] > port_title:
                self.tags['ports_list'].selected = max(i-1, 0)
                self.last_port = self.tags['ports_list'].selected + 1
                return

        ## Do nothing.

    def selected_port(self):
        if len(self.port_list) == 0:
            return 0

        self.last_port = self.tags['ports_list'].selected
        return self.port_list[self.last_port]

    def do_update(self, events):
        super().do_update(events)
        if not self.ready:
            self.update_ports()
            if not self.ready:
                return True

        if len(self.port_list) > 0 and self.last_port != self.tags['ports_list'].selected:
            self.last_port = self.tags['ports_list'].selected

            port_name = self.port_list[self.last_port]
            port_info = self.all_ports[port_name]
            self.gui.set_port_info(port_name, port_info)

            self.tags['port_image'].image = self.gui.get_port_image(port_name)

        if events.was_pressed('X'):
            if len(self.port_list) > 0:
                self.gui.push_scene('ports', FiltersScene(self.gui, self))

            return True

        if events.was_pressed('B'):
            self.gui.pop_scene()
            return True

        if events.was_pressed('A') and len(self.port_list) > 0:
            self.last_port = self.tags['ports_list'].selected
            port_name = self.port_list[self.last_port]

            logger.debug(f"{self.options['mode']}: {port_name}")
            if self.options['mode'] == 'install':
                self.ready = False
                self.gui.push_scene('port_info', PortInfoScene(self.gui, port_name, 'install'))

            elif self.options['mode'] == 'uninstall':
                self.ready = False
                self.gui.push_scene('port_info', PortInfoScene(self.gui, port_name, 'uninstall'))

            return True


class PortInfoScene(BaseScene):
    def __init__(self, gui, port_name, action):
        super().__init__(gui)

        self.load_regions("port_info", [
            'back_button',
            'ok_button',
            ])

        self.port_name = port_name
        self.action = action
        self.ready = False
        self.update_port()

    def update_port(self):
        if self.gui.hm is None:
            return

        self.port_info = self.gui.hm.port_info(self.port_name)
        logger.debug(f"{self.action}: {self.port_name} -> {self.port_info}")

        self.tags['port_image'].image = self.gui.get_port_image(self.port_name)
        self.gui.set_port_info(self.port_name, self.port_info)

        self.tags['ok_button'].text = self.action.title()
        self.tags['back_button'].text = "Back"

        self.ready = True

    def do_update(self, events):
        super().do_update(events)

        if events.was_pressed('A'):
            self.gui.pop_scene()

            if self.action == 'install':
                self.gui.do_install(self.port_name)

            elif self.action == 'uninstall':
                self.gui.do_uninstall(self.port_name)

            return True

        if events.was_pressed('B'):
            self.gui.pop_scene()
            return True

        return True


class FiltersScene(BaseScene):
    def __init__(self, gui, list_scene):
        super().__init__(gui)

        self.load_regions("filter_list", [
            'filter_list',
            ])

        self.list_scene = list_scene
        self.locked_genres = list(list_scene.options['base_filters'])
        self.selected_genres = list(list_scene.options['filters'])
        self.selected_port = list_scene.selected_port()
        self.selected_port_title = list_scene.all_ports[self.selected_port]['attr']['title']
        self.port_list = []

        self.ready = False
        self.update_filters()

    def update_filters(self):
        if self.gui.hm is None:
            return

        genres = self.locked_genres + self.selected_genres
        total_ports = len(self.gui.hm.list_ports(genres))

        new_list = []
        self.port_list = []
        for hm_genre in harbourmaster.HM_GENRES:
            if hm_genre in self.locked_genres:
                continue

            if hm_genre in genres:
                ports = total_ports
                text = f"[x]  {hm_genre}   ({ports})"
            else:
                ports = len(self.gui.hm.list_ports(genres + [hm_genre]))
                text = f"[ ]  {hm_genre}   ({ports})"

            new_list.append(text)
            self.port_list.append(hm_genre)

        self.tags['filter_list'].list = new_list

        self.ready = True

    def do_update(self, events):
        super().do_update(events)
        if not self.ready:
            self.update_filters()
            if not self.ready:
                return True

        if events.was_pressed('A'):
            selected_filter = self.port_list[self.tags['filter_list'].selected]

            if selected_filter in self.selected_genres:
                self.selected_genres.remove(selected_filter)
            else:
                self.selected_genres.append(selected_filter)

            self.update_filters()
            self.list_scene.options['filters'] = self.selected_genres
            self.list_scene.update_ports()
            self.list_scene.try_to_select(self.selected_port, self.selected_port_title)
            return True

        if events.was_pressed('B'):
            self.gui.pop_scene()
            return True

        return True


class MessageWindowScene(BaseScene):
    """
    This is a scrolling window showing messages for downloading/installing/uninstalling/updating.

    It can have an optional progress bar at the bottom.
    """
    def __init__(self, gui):
        super().__init__(gui)

        self.load_regions("message_window", [
            'message_text',
            'progress_bar',
            ])

    def do_update(self, events):
        super().do_update(events)
        # sdl2.SDL_Delay(1000)

        if self.gui.callback_amount is not None:
            self.tags['progress_bar'].progress_amount = self.gui.callback_amount
        else:
            self.tags['progress_bar'].progress_amount = 0

        if events.was_pressed('B'):
            self.gui.do_cancel()


class MessageBoxScene(BaseScene):
    def __init__(self, gui, message, *, want_cancel=False, want_ok=True):
        super().__init__(gui)

        self.load_regions("message_box", ['message_text', ])

        self.tags['message_text'].text = message

        if 'cancel_button' in self.tags:
            self.tags['cancel_button'].visible = want_cancel

        if 'ok_button' in self.tags:
            self.tags['ok_button'].visible = want_ok


class PortMasterGUI(pySDL2gui.GUI, harbourmaster.Callback):
    TICK_INTERVAL = 1000 // 5
    TEXT_DATA_FREQ = 5000

    def __init__(self):
        # Initialize SDL
        sdl2.ext.init(
            joystick=True)

        # Define window dimensions
        self.display_width = 640
        self.display_height = 480

        # Get the current display mode
        display_mode = sdl2.video.SDL_DisplayMode()

        if sdl2.video.SDL_GetCurrentDisplayMode(0, display_mode) != 0:
            print("Failed to get display mode:", sdl2.SDL_GetError())
        else:
            self.display_width = display_mode.w
            self.display_height = display_mode.h
            # Print the display width and height
            print(f"Display size: {self.display_width}x{self.display_height}")

        if harbourmaster.HM_TESTING:
            capabilities = harbourmaster.device_info()

            ## Uncomment one of these to pretend to be a different device. more devices in pylibs/harbourmaster/hardware.py
            pretend_device = (
                # 'rg351p'
                # 'rg552'
                # 'rg503'
                # 'rg351v'
                'rg353v'
                # 'ogs'
                # 'x55'
                )

            if pretend_device in harbourmaster.HW_INFO:
                capabilities.update(**harbourmaster.HW_INFO[pretend_device])
                self.display_width, self.display_height = capabilities['resolution']

            print(f"Forcing size: {self.display_width}x{self.display_height}")

        # Create the window
        self.window = sdl2.ext.Window("PortMaster", size=(self.display_width, self.display_height))
        self.window.show()

        # Create a renderer for drawing on the window
        renderer = sdl2.ext.Renderer(self.window, flags=sdl2.SDL_RENDERER_ACCELERATED)

        sdl2.SDL_SetHint(sdl2.SDL_HINT_RENDER_SCALE_QUALITY, b"2")

        super().__init__(renderer)

        self.cancellable = True

        self.resources.add_path(PYLIB_PATH / "default_theme")
        # self.gui.resources.add_path(harbourmaster.HM_TOOLS_DIR / "PortMaster" / "pylibs")

        theme_file = self.resources.find("theme.json")
        if theme_file is None:
            raise RuntimeError("FUCK IT ALL!")

        self.text_data = {}
        self.text_data_updated = sdl2.SDL_GetTicks64() - self.TEXT_DATA_FREQ - 1
        self.changed_keys = set()
        self.formatter = StringFormatter(self.text_data)

        self.theme_data = theme_load(self, theme_file)

        self.scenes = [
            ('root', [MainMenuScene(self)]),
            ]

        self.callback_messages = []
        self.callback_progress = None
        self.callback_amount = 0
        self.message_box_depth = 0
        self.message_box_scene = None
        self.was_cancelled = False

        self.updated = False

        device_info = harbourmaster.device_info()
        self.set_data('system.portmaster_version', PORTMASTER_VERSION)
        self.set_data('system.harbourmaster_version', harbourmaster.HARBOURMASTER_VERSION)
        self.set_data('system.cfw_name', device_info['name'])
        self.set_data('system.cfw_version', device_info['version'])
        self.set_data('system.device_name', device_info['device'])
        self.set_data('system.progress_text', "")
        self.set_data('system.progress_amount', "")

    ## Loop stuff.
    def run(self):
        try:
            while True:
                self.do_loop()

        except harbourmaster.CancelEvent:
            pass

    def do_loop(self, *, no_delay=False):
        events = self.events
        events.handle_events()

        if events.buttons['START'] and self.events.buttons['BACK']:
            events.running = False

        if not events.running:
            self.do_cancel()

        self.do_update()
        self.do_draw()

        ## TODO: fix it, 30 is approximately 30fps (1000 // 30)
        if not no_delay:
            sdl2.SDL_Delay(30)

    def do_update(self):
        # Update tags
        time = sdl2.SDL_GetTicks64()
        if (time - self.text_data_updated) > self.TEXT_DATA_FREQ:
            self.set_data("system.time_24hr", datetime.datetime.now().strftime("%H:%M"))
            self.set_data("system.time_12hr", datetime.datetime.now().strftime("%I:%M %p"))

            disk_usage = shutil.disk_usage(str(harbourmaster.HM_PORTS_DIR))

            self.set_data("system.free_space", harbourmaster.nice_size(disk_usage.free))
            self.set_data("system.used_space", harbourmaster.nice_size(disk_usage.used))
            self.set_data("system.total_space", harbourmaster.nice_size(disk_usage.total))

            battery_file = Path("/sys/class/power_supply/battery/capacity")
            if battery_file.exists():
                self.set_data("system.battery_level", f"{int(battery_file.read_text().strip())}%")

            else:
                self.set_data("system.battery_level", "N/A")

            self.text_data_updated = time

        # Events get handled in reversed order.
        for scene in reversed(self.scenes[-1][1]):
            if scene.do_update(self.events):
                break

    def do_draw(self):
        ## Check for any keys changed in our template system.
        if len(self.changed_keys):
            for layer in self.scenes:
                for scene in layer[1]:
                    scene.update_data(self.changed_keys)

            self.changed_keys.clear()

        # Drawing happens in forwards order
        # if self.updated:
        self.renderer.clear()

        for scene in self.scenes[-1][1]:
            scene.do_draw()

        self.renderer.present()
        self.clean()
            # self.window.refresh()

        # self.updated = False

    def get_port_image(self, port_name):
        image = None
        if self.hm is not None:
            image = self.hm.port_images(port_name)

            if image is not None:
                image = image.get('screenshot', None)

        if image is None:
            image = self.resources.find("no-image.jpg")

        return self.images.load(image)

    def set_port_info(self, port_name, port_info):
        ## TODO: make this better :D
        if port_name is None:
            self.set_data("port_info.title", "** NO PORT **")
            self.set_data("port_info.description", "")
            self.set_data("port_info.instructions", "")
            self.set_data("port_info.genres", "")
            self.set_data("port_info.porter", "")
            self.set_data("port_info.ready_to_run", "")
            self.set_data("port_info.runtime", "")
            self.set_data("port_info.download_size", "")
            return

        self.set_data("port_info.title", port_info['attr']['title'])
        self.set_data("port_info.description", port_info['attr']['desc'])
        self.set_data("port_info.instructions", port_info['attr']['inst'])
        self.set_data("port_info.genres", ', '.join(port_info['attr']['genres']))
        self.set_data("port_info.porter", port_info['attr']['porter'])
        self.set_data("port_info.ready_to_run", port_info['attr']['rtr'] and "Ready to Run" or "Files Required")

        runtime = port_info['attr']['runtime']
        if runtime is not None:
            self.set_data("port_info.runtime", runtime_nicename(runtime))
            if (self.hm.libs_dir / runtime).is_file():
                self.set_data("port_info.runtime_status", "Installed")
            else:
                self.set_data("port_info.runtime_status", "Missing")

        else:
            self.set_data("port_info.runtime", "None")
            self.set_data("port_info.runtime_status", "N/A")

        self.set_data("port_info.download_size", harbourmaster.nice_size(self.hm.port_download_size(port_name)))

    def set_data(self, key, value):
        if self.text_data.get(key, None) == value:
            return

        self.text_data[key] = value
        self.changed_keys.add(key)
        # logger.debug(f"{key}: {value}")

    def format_data(self, input_string, used_keys=None):
        return self.formatter.format_string(input_string, used_keys)

    def quit(self):
        # Clean up
        sdl2.ext.quit()

    ## Messagebox / Callback stuff
    def callback_update(self):
        if self.message_box_scene:
            self.message_box_scene.tags['message_text'].text = '\n'.join(self.callback_messages[-13:])

            self.do_loop(no_delay=True)

    def progress(self, message, amount, total=None, fmt=None):
        if message is None:
            self.callback_progress = None
            self.callback_amount = 0
            self.set_data("system.progress_text", "")
            self.set_data("system.progress_amount", "")

        else:
            if total is not None:
                self.callback_amount = int(amount / total * 100)
            else:
                self.callback_amount = 0

            self.set_data("system.progress_text", message)
            self.set_data("system.progress_amount", format_progress(amount, total, fmt))

        self.callback_update()

    def message(self, message):
        self.callback_messages.append(message)
        self.callback_update()

    def message_box(self, message, want_cancel=False, want_ok=True):
        """
        Display a message box
        """

        with self.enable_cancellable(True):
            self.push_scene('message_box', MessageBoxScene(self, message, want_cancel=want_cancel, want_ok=want_ok))

            try:
                while True:
                    if self.events.was_pressed('A'):
                        return True

                    if self.events.was_pressed('B'):
                        if want_cancel:
                            return False

                        return True

                    self.do_loop()

            finally:
                self.pop_scene()

    def messages_begin(self, *, internal=False):
        """
        Show messages window.

        Deprecated, use `with gui.enable_messages():` instead
        """

        if not internal:
            logger.error("Using old messages begin/end api is deprecated.")

        if self.message_box_depth < 0:
            self.message_box_depth = 0
            self.callback_messages.clear()

        if self.message_box_depth == 0:
            self.message_box_scene = MessageWindowScene(self)
            self.push_scene('messages', self.message_box_scene)

        self.message_box_depth += 1

    def messages_end(self, *, internal=False):
        """
        Hide messages window.

        Deprecated, use `with gui.enable_messages():` instead
        """
        if not internal:
            logger.error("Using old messages begin/end api is deprecated.")

        self.message_box_depth -= 1
        if self.message_box_depth <= 0 and self.message_box_scene:
            self.message_box_depth = 0
            self.callback_messages.clear()
            self.message_box_scene = None
            self.callback_progress = None
            self.pop_scene()

    @contextlib.contextmanager
    def enable_messages(self):
        """
        Shows and hides the messages window.
        """
        try:
            self.messages_begin(internal=True)

            yield

            ## Fix a bug
            self.progress(None, None, None)

        finally:
            self.messages_end(internal=True)

    ## Scene code.
    def scene_list(self):
        return [
            scene[0]
            for scene in self.scenes]

    def push_scene(self, name, scene):
        """
        Add a scene, if the name is the same as the current layer it is added to it.
        """
        if name == self.scenes[-1][0]:
            logger.debug(f"PUSH SCENE ADD {name}")
            self.scenes[-1][1].append(scene)
            logger.debug(f"SCENE LIST: {self.scene_list()}")

        else:
            logger.debug(f"PUSH SCENE LAYER {name}")
            self.scenes.append((name, [scene]))

            logger.debug(f"SCENE LIST: {self.scene_list()}")

    def pop_scene(self, name=None):
        """
        Remove a single scene, or remove until we get back to scene named "name".
        """
        if name is None:
            # If name is none, just pop the most top scene.
            if len(self.scenes[-1][1]) > 1:
                logger.debug(f"POP SCENE REM {self.scenes[-1][0]}")

                self.scenes[-1][1].pop(-1)

                logger.debug(f"SCENE LIST: {self.scene_list()}")

            elif len(self.scenes) > 1:
                logger.debug(f"POP SCENE LAYER {self.scenes[-1][0]}")
                self.scenes.pop(-1)

                logger.debug(f"SCENE LIST: {self.scene_list()}")

        elif name == self.scenes[-1][0]:
            # If name is the active, scene, just remove a single scene layer from it.
            logger.debug(f"POP SCENE {name} REM {self.scenes[-1][0]}")
            if len(self.scenes[-1][1]) > 1:
                self.scenes[-1][1].pop(-1)

            logger.debug(f"SCENE LIST: {self.scene_list()}")

        else:

            while len(self.scenes) > 1:
                if self.scenes[-1][0] == name:
                    break

                logger.debug(f"POP SCENE {name} LAYER {self.scenes[-1][0]}")

                self.scenes.pop(-1)

            logger.debug(f"SCENE LIST: {self.scene_list()}")

    ## Cancelling code.
    def do_cancel(self):
        """
        Cancel if it is possible
        """
        if self.cancellable is True:
            raise harbourmaster.CancelEvent()

    @contextlib.contextmanager
    def enable_cancellable(self, cancellable=False):
        """
        Controls whether you
        """
        old_cancellable = self.cancellable
        self.cancellable = cancellable
        self.was_cancelled = False

        try:
            yield

        except requests.exceptions.ConnectionError as err:
            # self.do_popup_message(f"Connection Error: {err}")
            logger.error(f"Connection Error: {err}")
            self.was_cancelled = True

        except harbourmaster.CancelEvent:
            self.was_cancelled = True

        finally:
            self.cancellable = old_cancellable

    ## HarbourMaster Commands.
    def do_install(self, port_name):

        with self.enable_messages():
            self.message(f"Installing {port_name}")
            self.do_loop(no_delay=True)

            with self.enable_cancellable(True):
                self.hm.install_port(port_name)
                self.hm.load_ports()

    def do_uninstall(self, port_name):

        with self.enable_messages():
            self.message(f"Uninstalling {port_name}")
            self.do_loop(no_delay=True)

            with self.enable_cancellable(False):
                self.hm.uninstall_port(port_name)
                self.hm.load_ports()

    def do_update_ports(self):
        with self.enable_messages():
            with self.enable_cancellable(False):
                self.message('Updating all port sources:')
                for source in self.hm.sources:
                    self.hm.sources[source].update()

                self.hm.load_ports()


def runtime_nicename(runtime):
    if runtime.startswith("frt"):
        return f"Godot/FRT {runtime.split('_', 1)[1].rsplit('.', 1)[0]}"

    if runtime.startswith("mono"):
        return f"Mono {runtime.split('-', 1)[1].rsplit('-', 1)[0]}"

    if "jdk" in runtime and runtime.startswith("zulu11"):
        return f"JDK {runtime.split('-')[2][3:]}"

    return runtime


@logger.catch
def main(argv):
    global LOG_FILE_HANDLE

    with make_temp_directory() as temp_dir:
        argv = argv[:]

        config = {
            'quiet': False,
            'no-check': False,
            'debug': False,
            'no-colour': False,
            'force-colour': False,
            'no-log': False,
            'help': False,
            }

        i = 1
        while i < len(argv):
            if argv[i] == '--':
                del argv[i]
                break

            if argv[i].startswith('--'):
                if argv[i][2:] in config:
                    config[argv[i][2:]] = True
                else:
                    if not config['quiet']:
                        logger.error(f"unknown argument {argv}")

                del argv[i]
                continue

            i += 1

        if config['quiet']:
            logger.remove(0)  # For the default handler, it's actually '0'.
            logger.add(sys.stderr, level="ERROR")
        elif config['debug']:
            logger.remove(0)  # For the default handler, it's actually '0'.
            logger.add(sys.stderr, level="DEBUG")

        if config['no-log']:
            logger.remove(LOG_FILE_HANDLE)
            LOG_FILE_HANDLE = None

        if config['no-colour']:
            utility.do_color(False)
        elif config['force-colour']:
            utility.do_color(True)

        pm = PortMasterGUI()
        pm.hm = None

        with pm.enable_cancellable(False):
            hm = HarbourMaster(config, temp_dir=temp_dir, callback=pm)

        pm.hm = hm

        with pm.enable_cancellable(True):
            pm.run()

        pm.quit()


if __name__ == '__main__':
    exit(main(sys.argv))
