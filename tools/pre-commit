#!/usr/bin/env python3

"""
GitHubRepoV1 Source

Place in your .git/hooks folder, this will build all the files necessary for GitHubRepoV1 to work.

On commit this will make sure each zip file has a .md5/.md5sum file, and ports.json is up to date.


"""

import datetime
import fnmatch
import hashlib
import json
import os
import pathlib
import re
import shutil
import subprocess
import sys
import tempfile
import textwrap
import zipfile

from pathlib import Path

################################################################################
## CONFIGRE THIS
PM_PRIORITY = 50
PM_PREFIX   = "klop"
PM_NAME     = "Kloptops"

GIT_USER_NAME   = "kloptops"
GIT_REPO_NAME   = "Portmaster-misc"
GIT_REPO_BRANCH = "main"
GIT_ROOT_PATH   = "releases/" ## Really should end with a slash

USE_MD5SUM = True

################################################################################
## Only touch this as you know what you are doing.
DEFAULT_CONFIG_DATA = {
    "prefix": PM_PREFIX,
    "api": "GitHubRepoV1",
    "name": PM_NAME,
    "config": {
        "user_name":   GIT_USER_NAME,
        "repo_name":   GIT_REPO_NAME,
        "branch_name": GIT_REPO_BRANCH,
        "sub_folder":  GIT_ROOT_PATH
        },
    "url": None,
    "last_checked": None,
    "version": 1,
    "data": {}
    }

################################################################################
## Utils
def add_unique(items, item):
    if isinstance(items, list) and item not in items:
        items.append(item)


def hash_file(file):
    md5 = hashlib.md5()
    with open(file, 'rb') as fh:
        while True:
            data = fh.read(1024 * 1024)
            if len(data) == 0:
                break

            md5.update(data)

    return md5.hexdigest()


def hash_text(text):
    md5 = hashlib.md5()
    if isinstance(text, str):
        md5.update(text.encode('utf-8'))
    else:
        md5.update(text)

    return md5.hexdigest()


def make_md5(file_name, modified_files=None):
    md5 = hash_file(file_name)
    sum_file = file_name.with_name(file_name.name + '.md5')
    with sum_file.open('wt') as fh:
        fh.write(md5)

    add_unique(modified_files, str(sum_file))

    return md5


def make_md5sum(file_name, modified_files=None):
    md5 = hash_file(file_name)
    sum_file = file_name.with_name(file_name.name + '.md5sum')
    with sum_file.open('wt') as fh:
        fh.write(f"{md5} *{file_name.name}")

    add_unique(modified_files, str(sum_file))

    return md5


def clean_name(file_name, attr='name'):
    if attr == 'name':
        name = file_name.name
    elif attr == 'stem':
        name = file_name.name
        if '.' in name:
            name = name.split('.', 1)[0]
    else:
        name = str(file_name)

    return name.lower().replace(" ", ".").replace("..", ".")


def delete_from_zip(zip_name, *files_to_delete):
    cmd=['zip', '-d', zip_name] + list(files_to_delete)
    subprocess.check_call(cmd)


################################################################################
## Port Information
PORT_INFO_ROOT_ATTRS = {
    'version': 2,
    'name': None,
    'items': None,
    'items_opt': None,
    'attr': {},
    'status': None,
    }

PORT_INFO_ATTR_ATTRS = {
    'title': "",
    'desc': "",
    'inst': "",
    'genres': [],
    'porter': "",
    'image': {},
    'rtr': False,
    'runtime': None,
    'reqs': {},
    }


def port_info_load(raw_info, source_name=None, do_default=False):
    if isinstance(raw_info, pathlib.PurePath):
        source_name = str(raw_info)

        with raw_info.open('r') as fh:
            info = json.load(fh)
            if info is None or not isinstance(info, dict):
                if do_default:
                    info = {}
                else:
                    return None

    elif isinstance(raw_info, str):
        if raw_info.strip().startswith('{') and raw_info.strip().endswith('}'):
            if source_name is None:
                source_name = "<str>"

            info = json.loads(info)
            if info is None or not isinstance(info, dict):
                if do_default:
                    info = {}
                else:
                    return None

        elif Path(raw_info).is_file():
            source_name = raw_info

            with open(rawinfo, 'r') as fh:
                info = json.load(fh)
                if info is None or not isinstance(info, dict):
                    if do_default:
                        info = {}
                    else:
                        return None

        else:
            if source_name is None:
                source_name = "<str>"

            print(f'Unable to load port_info from {source_name!r}: {raw_info!r}')
            if do_default:
                info = {}
            else:
                return None

    elif isinstance(raw_info, dict):
        if source_name is None:
            source_name = "<dict>"

        info = raw_info

    else:
        print(f'Unable to load port_info from {source_name!r}: {raw_info!r}')
        if do_default:
            info = {}
        else:
            return None

    if info.get('version', None) == 1 or 'source' in info:
        # Update older json version to the newer one.
        info = info.copy()
        info['name'] = info['source'].rsplit('/', 1)[-1]
        del info['source']
        info['version'] = 2

        if info.get('md5', None) is not None:
            info['status'] = {
                'source': "Unknown",
                'md5': info['md5'],
                'status': "Unknown",
                }
            del info['md5']

        # WHOOPS! :O
        if info.get('attr', {}).get('runtime', None) == "blank":
            info['attr']['runtime'] = None

    # This strips out extra stuff
    port_info = {}

    for attr, attr_default in PORT_INFO_ROOT_ATTRS.items():
        if isinstance(attr_default, (dict, list)):
            attr_default = attr_default.copy()

        port_info[attr] = info.get(attr, attr_default)

    for attr, attr_default in PORT_INFO_ATTR_ATTRS.items():
        if isinstance(attr_default, (dict, list)):
            attr_default = attr_default.copy()

        port_info['attr'][attr] = info.get('attr', {}).get(attr, attr_default)

    if isinstance(port_info['items'], list):
        i = 0
        while i < len(port_info['items']):
            item = port_info['items'][i]
            if item.startswith('/'):
                print(f"- port_info['items'] contains bad name {item}")
                del port_info['items'][i]
                continue

            if item.startswith('../'):
                print(f"- port_info['items'] contains bad name {item}")
                del port_info['items'][i]
                continue

            if '/../' in item:
                print(f"- port_info['items'] contains bad name {item}")
                del port_info['items'][i]
                continue

            i += 1

    if isinstance(port_info['items_opt'], list):
        i = 0
        while i < len(port_info['items_opt']):
            item = port_info['items_opt'][i]
            if item.startswith('/'):
                print(f"- port_info['items_opt'] contains bad name {item}")
                del port_info['items_opt'][i]
                continue

            if item.startswith('../'):
                print(f"- port_info['items_opt'] contains bad name {item}")
                del port_info['items_opt'][i]
                continue

            if '/../' in item:
                print(f"- port_info['items_opt'] contains bad name {item}")
                del port_info['items'][i]
                continue

            i += 1

    return port_info


def port_info_merge(port_info, other):
    if isinstance(other, (str, pathlib.PurePath)):
        other_info = port_info_parse(other)
    elif isinstance(other, dict):
        other_info = other
    else:
        print(f"Unable to merge {other!r}")
        return None

    for attr, attr_default in PORT_INFO_ROOT_ATTRS.items():
        if attr == 'attr':
            break

        value_a = port_info[attr]
        value_b = other_info[attr]

        if value_a is None or value_a == "" or value_a == []:
            port_info[attr] = value_b
            continue

        if value_b in (True, False) and value_a in (True, False, None):
            port_info[attr] = value_b
            continue

        if isinstance(value_b, str) and value_a in ("", None):
            port_info[attr] = value_b
            continue

        if isinstance(value_b, list) and value_a in ([], None):
            port_info[attr] = value_b[:]
            continue

        if isinstance(value_b, dict) and value_a in ({}, None):
            port_info[attr] = value_b.copy()
            continue

    for key_b, value_b in other_info['attr'].items():
        if key_b not in port_info['attr']:
            continue

        if value_b in (True, False) and port_info['attr'][key_b] in (True, False, None):
            port_info['attr'][key_b] = value_b
            continue

        if isinstance(value_b, str) and port_info['attr'][key_b] in ("", None):
            port_info['attr'][key_b] = value_b
            continue

        if isinstance(value_b, list) and port_info['attr'][key_b] in ([], None):
            port_info['attr'][key_b] = value_b[:]
            continue

        if isinstance(value_b, dict) and port_info['attr'][key_b] in ({}, None):
            port_info['attr'][key_b] = value_b.copy()
            continue

    return port_info


def load_port_json(file_name, modified_files=None):
    # When we analyse a port, we want to look at the root directories, and the rooth scripts.
    port_info_file = None
    items = []
    dirs = []
    scripts = []

    zip_name = clean_name(file_name)

    with zipfile.ZipFile(file_name, 'r') as zf:
        for file_info in zf.infolist():
            if file_info.filename.startswith('/'):
                ## Sneaky
                print(f"- illegal file {file_info.filename!r}.")
                continue

            if file_info.filename.startswith('../'):
                ## Little
                print(f"- illegal file {file_info.filename!r}.")
                continue

            if '/../' in file_info.filename:
                ## Shits
                print(f"- illegal file {file_info.filename!r}.")
                continue

            if '/./' in file_info.filename:
                ## Not too bad I suppose.
                print(f"- illegal file {file_info.filename!r}.")
                continue

            if '/' in file_info.filename:
                parts = file_info.filename.split('/')

                if parts[0] not in dirs:
                    items.append(parts[0] + '/')
                    dirs.append(parts[0])

                if len(parts) == 2:
                    if parts[1].lower().endswith('.port.json'):
                        ## TODO: add the ability for multiple port folders to have multiple port.json files. 
                        if port_info_file is not None:
                            print(f"- multiple port.json files.")
                            print(f"  - Before: {port_info_file!r}")
                            print(f"  - Now:    {file_info.filename!r}")

                        port_info_file = file_info.filename

                if file_info.filename.lower().endswith('.sh'):
                    print(f"- extra script {file_info.filename!r}, this can cause issues.")

            else:
                if file_info.filename.lower().endswith('.sh'):
                    scripts.append(file_info.filename)
                    items.append(file_info.filename)
                else:
                    print(f"- extra file at root level thats not a script: {file_info.filename!r}")

        if port_info_file is not None:
            with zf.open(port_info_file, "r") as fh:
                port_info_data = fh.read().decode()
                port_info = port_info_load(json.loads(port_info_data))
        else:
            port_info_data = ""
            port_info = port_info_load({})

    add_unique(modified_files, str(file_name))

    ## These two are always overriden.
    port_info['items'] = items
    port_info['name'] = f"{zip_name}"

    delete_port_info = True

    if port_info_file is None:
        port_info_file = f"{dirs[0]}/{(clean_name(file_name, 'stem') + '.port.json')}"
        print(f"- {file_name} missing .port.json")
        print(f"  adding {port_info.file}.")
        print(f"{json.dumps(port_info, indent=4)}")
        delete_port_info = False

    new_port_info_data = json.dumps(port_info, indent=4)
    if port_info_data != new_port_info_data:
        print(f"Old: {port_info_data.strip()}")
        print(f"New: {new_port_info_data.strip()}")
        if delete_port_info:
            delete_from_zip(str(file_name), str(port_info_file))

        ## TODO: Figure out how to update the file without it crapping out.
        with zipfile.ZipFile(file_name, 'a') as zf:
            zf.writestr(port_info_file, new_port_info_data)

    return port_info


def main():
    make_sumfile = USE_MD5SUM and make_md5sum or make_md5
    ROOT_PATH = Path(GIT_ROOT_PATH)
    SOURCE_FILE = ROOT_PATH / f"{PM_PRIORITY:03d}_{PM_NAME.casefold()}.source.json"
    PORTS_JSON = ROOT_PATH / "ports.json"

    modified_files = []

    with SOURCE_FILE.open("w") as fh:
        json.dump(DEFAULT_CONFIG_DATA, fh, indent=4)

    add_unique(modified_files, str(SOURCE_FILE))

    ports_info = {
        'version': 1,
        'ports': [],
        }

    for file_name in ROOT_PATH.iterdir():
        if file_name.name.casefold().endswith('.zip'):
            port_info = load_port_json(file_name, modified_files)
            port_info['md5'] = make_sumfile(file_name, modified_files)

            ports_info['ports'].append(port_info)

        if (file_name.name.casefold().rsplit('.', 1)[1] not in ('md5', 'md5sum', '.source.json') and
                file_name.name.casefold() not in ('ports.json', ) and
                not file_name.name.startswith('.')):

            make_sumfile(file_name, modified_files)

    with PORTS_JSON.open('wt') as fh:
        json.dump(ports_info, fh, indent=4)

    add_unique(modified_files, str(PORTS_JSON))

    make_sumfile(PORTS_JSON, modified_files)

    for file_name in modified_files:
        subprocess.check_output(['git', 'add', file_name])


if __name__ == '__main__':
    main()
